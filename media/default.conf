[General]

# Preferred file type to save the cleaned image as.
# If no file type is specified, the original file type will be used.
preferred_file_type = 

# Preferred file type to save the mask as.
# Only image formats that allow for transparency are supported.
preferred_mask_file_type = .png

# Scale the input image by this amount before processing.
# This is useful for significantly speeding up processing on large images.
# The image will be scaled down, processed, and then only the mask is scaled back up.
# Meaning that the cleaned output will still use the original, unscaled image to prevent any loss in quality.
# Images larger than 3000x3000 pixels should be scaled down, so that they fall within this range.
# E.g. an Image with the size 7000x10000 pixels should be scaled down with a factor of 0.25,
# so that it has the size 1750x2500 pixels during processing.
# The default value is 1.0, which means no scaling.
input_size_scale = 1.0



[TextDetector]

# Path to the text detection model, leave empty to use the built-in model.
# You can download older versions of the model here:
# https://github.com/zyddnys/manga-image-translator/releases/latest
model_path = 

# Number of models to run in parallel. This is useful if you have enough RAM
# (or VRAM with CUDA) to run multiple models at the same time.
# This, of course, will increase the speed of the process, but can also
# crash your computer if you overestimate your hardware.
# I recommend using 1 model per 2 GB of memory available.
concurrent_models = 1



[PreProcessor]

# Box sizes are given in the total number of pixels, so a box of 200x200 pixels has a size of 200 * 200 = 40000.
# To see these boxes visualized, use the --show-masks flag when cleaning and look inside the cache folder.

# Minimum size of any box to keep it.
box_min_size = 400

# Minimum size of a box with "unknown" language to keep it. This language is typically assigned to logos and other
# badly behaved text elements.
suspicious_box_min_size = 40000

# Whether to use OCR to detect boxes that aren't worth cleaning, like ones that only contain numbers or symbols.
ocr_enabled = True

# Maximum size of a box to perform OCR on.
# These useless boxes are usually small, and OCR is slow, so use this as a cutoff.
ocr_max_size = 3000

# Regex pattern to match against OCR results.
# Anything matching this pattern is discarded.
# Note that the OCR model returns full-width characters, so this pattern should match them.
ocr_blacklist_pattern = [～．ー！？０-９]*

# Padding to add to each side of a box.
# This is added to the initial boxes created by the text detector AI.
# These boxes are visualized in green with the --cache-masks flag.
box_padding_initial = 2

# Padding to add to the right side of a box.
# This extension helps to cover rubytext that floats off to the right of vertical text.
box_right_padding_initial = 3

# Padding to add to each side of a box.
# This is added to an extended set of boxes, used to cut out false positives by the text detector AI's mask.
# These boxes are visualized in purple with the --cache-masks flag.
box_padding_extended = 5

# Padding to add to the right side of a box.
# This extension helps to cover rubytext that floats off to the right of vertical text.
box_right_padding_extended = 5

# Padding to add to each side of a box.
# This is added to the reference boxes used to sample the original image while analyzing what mask to use.
# These boxes are visualized in blue with the --cache-masks flag.
box_reference_padding = 20



[Masker]


# Number of pixels to grow the mask by each step.
# This bulks up the outline of the mask, so smaller values will be more accurate but slower.
mask_growth_step_pixels = 2

# Number of steps to grow the mask by.
# A higher number will make more and larger masks, ultimately limited by the reference box size.
mask_growth_steps = 11

# Maximum threshold for a pixel to be considered off-white.
# The median color along the edge of a mask may not be pure white,
# so to prevent slight off-white tones on a pure-white background,
# anything lighter than this threshold value will be rounded up to pure white.
off_white_max_threshold = 240

# Minimum improvement in standard deviation of the mask to continue shrinking it.
# The standard deviation refers to the variation is color along the edge of a mask.
# A low variation means that the mask sits in a solid color,
# which means it doesn't intersect any text or other objects.
# Setting a higher value here requires a higher improvement to consider a smaller mask,
# to give a preference to larger masks.
mask_improvement_threshold = 0.1


# Whether to use the fast mask selection algorithm.
# When true, the mask selection algorith will pick the first perfect mask, if one is found early.
# This is faster, but may not find the best mask, if a slightly bigger one would have been better.
mask_selection_fast = False

# The maximum standard deviation of a mask to consider.
# A high value here means a higher tolerance for the mask intersecting text or other objects,
# which isn't a good mask, as it will require inpainting anyway.
mask_max_standard_deviation = 15

# Color to use for the debug mask. This is a tuple of RGBA values.
debug_mask_color = 108,30,240,127



[Denoiser]

# When a bit of text is hard to mask off, the cleaning step likely had to choose a
# small mask, which leaves a lot of jpeg-artifacts behind, if they were around the text.

# This means that the color of pixels around the edge of a mask isn't uniform,
# which is quantified as a standard deviation. The denoiser can target masks with
# a minimum standard deviation and denoise the area right around the mask.
# This preserves details in the rest of the image, but removes artifacts right around where
# the text used to be.

# Since this is an optional step and may even be superfluous for high-resolution images that 
# don't suffer from jpeg-artifacts, it can be disabled here.
# Set to False to disable denoising.
denoising_enabled = True

# The minimum standard deviation of colors around the edge of a given mask
# to perform denoising on the region around the mask.
noise_min_standard_deviation = 0.25

# The thickness of an outline to denoise around a mask.
noise_outline_size = 5

# Fade the edges of the denoised cover mask by this amount to smoothly blend
# the denoised parts into the rest of the image.
noise_fade_radius = 1

# Set to True to support colored images.
colored_images = False

# How strongly to denoise the image. Higher values mean more denoising.
filter_strength = 10

# How strongly to denoise the color channels, as opposed to lightness.
# Higher values mean more denoising.
color_filter_strength = 10

# Size in pixels of the template patch that is used to compute weights. Should be odd.
template_window_size = 7

# Size in pixels of the window that is used to compute weighted average for given pixel. Should be odd.
search_window_size = 21

