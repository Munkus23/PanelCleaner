from functools import partial
from pathlib import Path
import PySide6.QtWidgets as Qw
import PySide6.QtGui as Qg
import PySide6.QtCore as Qc
from PySide6.QtCore import Signal, Slot
from logzero import logger

from pcleaner.gui.ui_generated_files.ui_ImageDetails import Ui_ImageDetails
import pcleaner.gui.structures as st
import pcleaner.gui.gui_utils as gu


THUMBNAIL_SIZE = 180, 180
PUSHBUTTON_THUMBNAIL_MARGIN = 16

# The index of the attribute name and description in the button map tuple.
ATTR_NAME = 0
DESCRIPTION = 1


class ImageDetailsWidget(Qw.QWidget, Ui_ImageDetails):
    """
    A widget that shows the details of an image object.
    """

    image_obj: st.ImageFile  # The image object to show.
    current_image: Qg.QImage | None  # The currently shown image.

    button_map: dict[
        Qw.QPushButton, tuple[str, str]
    ]  # Map buttons to the file object attribute name.

    def __init__(self, parent=None, image_obj: st.ImageFile = None):
        """
        Init the widget.

        :param image_obj: The image object to show.
        """
        logger.info(f"Opening details tab for {image_obj.path}")
        Qw.QWidget.__init__(self, parent)
        self.setupUi(self)

        self.image_obj = image_obj
        self.button_map = self.init_button_map()

        # Clear sample text from labels that only update on user interaction.
        self.label_size.setText("")
        self.label_position.setText("")
        self.label_step.setText("")

        self.init_sidebar()
        self.load_all_image_thumbnails()
        self.pushButton_input.click()

    def init_button_map(self) -> dict[Qw.QPushButton, tuple[str, str]]:
        return {
            self.pushButton_input: ["path", "The original image."],
            self.pushButton_text_detection: ["path_ai_mask", "The rough mask generated by the AI."],
            self.pushButton_initial_boxes: [
                "path_initial_boxes",
                "The outlines of the text boxes the AI found.",
            ],
            self.pushButton_final_boxes: ["path_final_boxes", "Temp Descriptions"],
            self.pushButton_box_mask: ["path_box_mask", "Temp Descriptions"],
            self.pushButton_cut_mask: ["path_cut_mask", "Temp Descriptions"],
            self.pushButton_mask_layers: ["path_mask_layers", "Temp Descriptions"],
            self.pushButton_final_mask: ["path_final_mask", "Temp Descriptions"],
            self.pushButton_output_masked: ["path_masked_image", "Temp Descriptions"],
            self.pushButton_denoise_mask: ["path_denoiser_mask", "Temp Descriptions"],
            self.pushButton_denoised_output: ["path_denoised_image", "Temp Descriptions"],
        }

    def init_sidebar(self):
        """
        Set up the buttons in the sidebar.
        """
        self.label_file_name.setText(self.image_obj.path.name)
        self.label_file_name.setToolTip(str(self.image_obj.path))

        self.pushButton_zoom_in.clicked.connect(self.image_viewer.zoom_in)
        self.pushButton_zoom_out.clicked.connect(self.image_viewer.zoom_out)
        self.pushButton_zoom_reset.clicked.connect(self.image_viewer.zoom_reset)

        self.pushButton_export.clicked.connect(self.export_image)

        # Figure out the optimal button size.
        # It should fit within the thumbnail size while maintaining the aspect ratio.
        # The button size is the minimum of the thumbnail size and the image size.
        image_width, image_height = self.image_obj.size
        ratio = image_width / image_height
        if image_width > image_height:
            button_width = THUMBNAIL_SIZE[0]
            button_height = int(button_width / ratio)
        else:
            button_height = THUMBNAIL_SIZE[1]
            button_width = int(button_height * ratio)

        # Adjust the width of the scroll area to fit the buttons.
        scrollbar_width = Qw.QApplication.style().pixelMetric(Qw.QStyle.PM_ScrollBarExtent)
        margins_left, _, margins_right, _ = self.sidebar_layout.getContentsMargins()
        self.scrollArea.setFixedWidth(
            button_width
            + PUSHBUTTON_THUMBNAIL_MARGIN
            + scrollbar_width
            + margins_left
            + margins_right
            + 2,  # Arbitrary extra margin to make it look "right".
        )
        logger.debug(f"Setting scroll area width to {self.scrollArea.width()}")

        # Resize all the buttons.
        # self.scrollArea.setFixedWidth()
        for button in self.button_map:
            button.setFixedSize(
                button_width + PUSHBUTTON_THUMBNAIL_MARGIN,
                button_height + PUSHBUTTON_THUMBNAIL_MARGIN,
            )
            button.setIconSize(Qc.QSize(button_width, button_height))
            button.clicked.connect(partial(self.switch_to_image, button))

    def load_all_image_thumbnails(self):
        """
        Load all the images into the buttons.
        """
        for button, (attr_name, _) in self.button_map.items():
            if (path := self.image_obj.__getattribute__(attr_name)) is not None:
                try:
                    button.setIcon(Qg.QIcon(str(path)))
                except OSError as e:
                    logger.error(f"Failed to load image {path}: {e}")
            else:
                # button.setIcon(Qg.QIcon.fromTheme("image-x-generic"))
                button.setText("Generate Me")

    def switch_to_image(self, button: Qw.QPushButton):
        """
        Show the image in the button in the image view.

        :param button: The button that was clicked.
        """
        image_path = self.image_obj.__getattribute__(self.button_map[button][ATTR_NAME])
        self.label_step.setText(self.button_map[button][DESCRIPTION])
        if image_path is None:
            # Clear whatever image is currently shown.
            self.image_viewer.set_image(None)
            self.label_size.setText("")
            self.label_position.setText("")
            self.label_size_label.hide()
            self.label_position_label.hide()
            self.stackedWidget.setCurrentWidget(self.page_no_image)
        else:
            try:
                self.image_viewer.set_image(str(image_path))
                self.label_size.setText(
                    f"{self.image_viewer.image_dimensions[0]} Ã— {self.image_viewer.image_dimensions[1]}"
                )
                self.image_viewer.mouseMoved.connect(self.update_position_label)
                self.label_size_label.show()
                self.label_position_label.show()
                self.stackedWidget.setCurrentWidget(self.page_viewer)
            except OSError as e:
                logger.error(f"Image at {image_path} does not exist. {e}")
                gu.show_warning("Image not found.", f"Image at {image_path} does not exist: {e}")
                return

    @Slot(int, int)
    def update_position_label(self, x: int, y: int):
        """
        Update the position label with the current mouse position.

        :param x: The x coordinate of the mouse.
        :param y: The y coordinate of the mouse.
        """
        self.label_position.setText(f"{x}, {y}")

    def export_image(self):
        ...
